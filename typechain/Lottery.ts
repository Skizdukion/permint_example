/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface LotteryInterface extends utils.Interface {
  contractName: "Lottery";
  functions: {
    "adminAddress()": FunctionFragment;
    "adminNonce()": FunctionFragment;
    "adminWithdraw(uint256)": FunctionFragment;
    "allocation(uint256)": FunctionFragment;
    "approveTransfer(uint256)": FunctionFragment;
    "burnAllocation()": FunctionFragment;
    "buy(uint256,uint8[4])": FunctionFragment;
    "claimReward(uint256)": FunctionFragment;
    "drawed()": FunctionFragment;
    "drawing(uint256)": FunctionFragment;
    "drawingPhase()": FunctionFragment;
    "encodeFreeClaimTicketHasedMessage(address,uint256,uint256,uint8[4])": FunctionFragment;
    "enterDrawingPhase()": FunctionFragment;
    "freeClaimCounts(address)": FunctionFragment;
    "freeClaimTicketPermit(uint256,uint8[4],uint8,bytes32,bytes32)": FunctionFragment;
    "generateNumberIndexKey(uint8[4])": FunctionFragment;
    "getMatchingRewardAmount(uint256,uint256)": FunctionFragment;
    "getNumbersTicket(uint256)": FunctionFragment;
    "getRewardView(uint256)": FunctionFragment;
    "getTotalRewards(uint256)": FunctionFragment;
    "getUserHistory(address,uint256)": FunctionFragment;
    "historyAmount(uint256,uint256)": FunctionFragment;
    "historyNumbers(uint256,uint256)": FunctionFragment;
    "initialize(address,uint256,uint8,address,address,address,uint256)": FunctionFragment;
    "issueIndex()": FunctionFragment;
    "lastTimestamp()": FunctionFragment;
    "lotteryBuyInfo(uint256)": FunctionFragment;
    "lotteryId()": FunctionFragment;
    "lotteryInfo(uint256,uint256)": FunctionFragment;
    "maxNumber()": FunctionFragment;
    "minPrice()": FunctionFragment;
    "multiBuy(uint256,uint8[4][])": FunctionFragment;
    "multiClaim(uint256[])": FunctionFragment;
    "nextTimeDraw()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rolloverAllocation()": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setAllocation(uint8,uint8,uint8)": FunctionFragment;
    "setMainToken(address)": FunctionFragment;
    "setMaxNumber(uint8)": FunctionFragment;
    "setMinPrice(uint256)": FunctionFragment;
    "setNextTimeDraw(uint256)": FunctionFragment;
    "setTreasuryAddress(address)": FunctionFragment;
    "totalAddresses()": FunctionFragment;
    "totalAmount()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasuryAddress()": FunctionFragment;
    "userBuyAmountSum(uint256,uint64)": FunctionFragment;
    "userHistory(address,uint256,uint256)": FunctionFragment;
    "userInfo(address,uint256)": FunctionFragment;
    "vipList(uint256)": FunctionFragment;
    "winery()": FunctionFragment;
    "winningNumbers(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "adminAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adminNonce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adminWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allocation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveTransfer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burnAllocation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [
      BigNumberish,
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "drawed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "drawing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "drawingPhase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "encodeFreeClaimTicketHasedMessage",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "enterDrawingPhase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "freeClaimCounts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "freeClaimTicketPermit",
    values: [
      BigNumberish,
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "generateNumberIndexKey",
    values: [[BigNumberish, BigNumberish, BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "getMatchingRewardAmount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumbersTicket",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardView",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserHistory",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "historyAmount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "historyNumbers",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      string,
      string,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "issueIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lotteryBuyInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "lotteryId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lotteryInfo",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "maxNumber", values?: undefined): string;
  encodeFunctionData(functionFragment: "minPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "multiBuy",
    values: [
      BigNumberish,
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish][]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "multiClaim",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "nextTimeDraw",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rolloverAllocation",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setAllocation",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMainToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxNumber",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNextTimeDraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuryAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userBuyAmountSum",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userHistory",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vipList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "winery", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "winningNumbers",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "adminAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "adminNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "adminWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allocation", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "drawed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "drawing", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "drawingPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeFreeClaimTicketHasedMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enterDrawingPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freeClaimCounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freeClaimTicketPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateNumberIndexKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMatchingRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumbersTicket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardView",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "historyAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "historyNumbers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "issueIndex", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lotteryBuyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lotteryId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lotteryInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxNumber", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multiBuy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multiClaim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextTimeDraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rolloverAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMainToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNextTimeDraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userBuyAmountSum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vipList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "winery", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "winningNumbers",
    data: BytesLike
  ): Result;

  events: {
    "Buy(address,uint256)": EventFragment;
    "Claim(address,uint256,uint256)": EventFragment;
    "DevWithdraw(address,uint256)": EventFragment;
    "Drawing(uint256,uint8[4])": EventFragment;
    "Initialized(uint8)": EventFragment;
    "MultiBuy(address,uint256)": EventFragment;
    "MultiClaim(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Reset(uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Buy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DevWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Drawing"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MultiBuy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MultiClaim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Reset"): EventFragment;
}

export type BuyEvent = TypedEvent<
  [string, BigNumber],
  { user: string; tokenId: BigNumber }
>;

export type BuyEventFilter = TypedEventFilter<BuyEvent>;

export type ClaimEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { user: string; tokenid: BigNumber; amount: BigNumber }
>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export type DevWithdrawEvent = TypedEvent<
  [string, BigNumber],
  { user: string; amount: BigNumber }
>;

export type DevWithdrawEventFilter = TypedEventFilter<DevWithdrawEvent>;

export type DrawingEvent = TypedEvent<
  [BigNumber, [number, number, number, number]],
  { issueIndex: BigNumber; winningNumbers: [number, number, number, number] }
>;

export type DrawingEventFilter = TypedEventFilter<DrawingEvent>;

export type InitializedEvent = TypedEvent<[number], { version: number }>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export type MultiBuyEvent = TypedEvent<
  [string, BigNumber],
  { user: string; amount: BigNumber }
>;

export type MultiBuyEventFilter = TypedEventFilter<MultiBuyEvent>;

export type MultiClaimEvent = TypedEvent<
  [string, BigNumber],
  { user: string; amount: BigNumber }
>;

export type MultiClaimEventFilter = TypedEventFilter<MultiClaimEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type ResetEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  {
    issueIndex: BigNumber;
    unclaimableRewards: BigNumber;
    burnAmount: BigNumber;
  }
>;

export type ResetEventFilter = TypedEventFilter<ResetEvent>;

export interface Lottery extends BaseContract {
  contractName: "Lottery";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LotteryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    adminAddress(overrides?: CallOverrides): Promise<[string]>;

    adminNonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    adminWithdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allocation(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    approveTransfer(
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnAllocation(overrides?: CallOverrides): Promise<[number]>;

    buy(
      _price: BigNumberish,
      _numbers: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimReward(
      _lotteryId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    drawed(overrides?: CallOverrides): Promise<[boolean]>;

    drawing(
      _nextTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    drawingPhase(overrides?: CallOverrides): Promise<[boolean]>;

    encodeFreeClaimTicketHasedMessage(
      _sender: string,
      _freeClaimCounts: BigNumberish,
      _timeout: BigNumberish,
      _numbers: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<[string]>;

    enterDrawingPhase(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    freeClaimCounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    freeClaimTicketPermit(
      _timeout: BigNumberish,
      _numbers: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    generateNumberIndexKey(
      number: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getMatchingRewardAmount(
      _issueIndex: BigNumberish,
      _matchingNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNumbersTicket(
      _lotteryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[number, number, number, number]]>;

    getRewardView(
      _lotteryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalRewards(
      _issueIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserHistory(
      member: string,
      _issueIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    historyAmount(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    historyNumbers(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    initialize(
      _winery: string,
      _minPrice: BigNumberish,
      _maxNumber: BigNumberish,
      _owner: string,
      _adminAddress: string,
      _treasuryAddress: string,
      _nextTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    issueIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    lotteryBuyInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean, BigNumber, BigNumber] & {
        user: string;
        total: BigNumber;
        isClaimed: boolean;
        time: BigNumber;
        issueIndex: BigNumber;
      }
    >;

    lotteryId(overrides?: CallOverrides): Promise<[BigNumber]>;

    lotteryInfo(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxNumber(overrides?: CallOverrides): Promise<[number]>;

    minPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    multiBuy(
      _price: BigNumberish,
      _numbers: [BigNumberish, BigNumberish, BigNumberish, BigNumberish][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    multiClaim(
      _tickets: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nextTimeDraw(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rolloverAllocation(overrides?: CallOverrides): Promise<[number]>;

    setAdmin(
      _adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAllocation(
      _allocation1: BigNumberish,
      _allocation2: BigNumberish,
      _allocation3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMainToken(
      _newToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxNumber(
      _maxNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinPrice(
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNextTimeDraw(
      _nextTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTreasuryAddress(
      _treasuryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalAddresses(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasuryAddress(overrides?: CallOverrides): Promise<[string]>;

    userBuyAmountSum(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userHistory(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userInfo(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vipList(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    winery(overrides?: CallOverrides): Promise<[string]>;

    winningNumbers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;
  };

  adminAddress(overrides?: CallOverrides): Promise<string>;

  adminNonce(overrides?: CallOverrides): Promise<BigNumber>;

  adminWithdraw(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allocation(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;

  approveTransfer(
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnAllocation(overrides?: CallOverrides): Promise<number>;

  buy(
    _price: BigNumberish,
    _numbers: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimReward(
    _lotteryId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  drawed(overrides?: CallOverrides): Promise<boolean>;

  drawing(
    _nextTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  drawingPhase(overrides?: CallOverrides): Promise<boolean>;

  encodeFreeClaimTicketHasedMessage(
    _sender: string,
    _freeClaimCounts: BigNumberish,
    _timeout: BigNumberish,
    _numbers: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    overrides?: CallOverrides
  ): Promise<string>;

  enterDrawingPhase(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  freeClaimCounts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  freeClaimTicketPermit(
    _timeout: BigNumberish,
    _numbers: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    _v: BigNumberish,
    _r: BytesLike,
    _s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  generateNumberIndexKey(
    number: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getMatchingRewardAmount(
    _issueIndex: BigNumberish,
    _matchingNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNumbersTicket(
    _lotteryId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[number, number, number, number]>;

  getRewardView(
    _lotteryId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalRewards(
    _issueIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserHistory(
    member: string,
    _issueIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  historyAmount(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  historyNumbers(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  initialize(
    _winery: string,
    _minPrice: BigNumberish,
    _maxNumber: BigNumberish,
    _owner: string,
    _adminAddress: string,
    _treasuryAddress: string,
    _nextTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  issueIndex(overrides?: CallOverrides): Promise<BigNumber>;

  lastTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  lotteryBuyInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, boolean, BigNumber, BigNumber] & {
      user: string;
      total: BigNumber;
      isClaimed: boolean;
      time: BigNumber;
      issueIndex: BigNumber;
    }
  >;

  lotteryId(overrides?: CallOverrides): Promise<BigNumber>;

  lotteryInfo(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxNumber(overrides?: CallOverrides): Promise<number>;

  minPrice(overrides?: CallOverrides): Promise<BigNumber>;

  multiBuy(
    _price: BigNumberish,
    _numbers: [BigNumberish, BigNumberish, BigNumberish, BigNumberish][],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  multiClaim(
    _tickets: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nextTimeDraw(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rolloverAllocation(overrides?: CallOverrides): Promise<number>;

  setAdmin(
    _adminAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAllocation(
    _allocation1: BigNumberish,
    _allocation2: BigNumberish,
    _allocation3: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMainToken(
    _newToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxNumber(
    _maxNumber: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinPrice(
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNextTimeDraw(
    _nextTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTreasuryAddress(
    _treasuryAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalAddresses(overrides?: CallOverrides): Promise<BigNumber>;

  totalAmount(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasuryAddress(overrides?: CallOverrides): Promise<string>;

  userBuyAmountSum(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userHistory(
    arg0: string,
    arg1: BigNumberish,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userInfo(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  vipList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  winery(overrides?: CallOverrides): Promise<string>;

  winningNumbers(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  callStatic: {
    adminAddress(overrides?: CallOverrides): Promise<string>;

    adminNonce(overrides?: CallOverrides): Promise<BigNumber>;

    adminWithdraw(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    allocation(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;

    approveTransfer(
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    burnAllocation(overrides?: CallOverrides): Promise<number>;

    buy(
      _price: BigNumberish,
      _numbers: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimReward(
      _lotteryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    drawed(overrides?: CallOverrides): Promise<boolean>;

    drawing(_nextTime: BigNumberish, overrides?: CallOverrides): Promise<void>;

    drawingPhase(overrides?: CallOverrides): Promise<boolean>;

    encodeFreeClaimTicketHasedMessage(
      _sender: string,
      _freeClaimCounts: BigNumberish,
      _timeout: BigNumberish,
      _numbers: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<string>;

    enterDrawingPhase(overrides?: CallOverrides): Promise<void>;

    freeClaimCounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    freeClaimTicketPermit(
      _timeout: BigNumberish,
      _numbers: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    generateNumberIndexKey(
      number: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getMatchingRewardAmount(
      _issueIndex: BigNumberish,
      _matchingNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumbersTicket(
      _lotteryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, number, number, number]>;

    getRewardView(
      _lotteryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalRewards(
      _issueIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserHistory(
      member: string,
      _issueIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    historyAmount(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    historyNumbers(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    initialize(
      _winery: string,
      _minPrice: BigNumberish,
      _maxNumber: BigNumberish,
      _owner: string,
      _adminAddress: string,
      _treasuryAddress: string,
      _nextTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    issueIndex(overrides?: CallOverrides): Promise<BigNumber>;

    lastTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    lotteryBuyInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean, BigNumber, BigNumber] & {
        user: string;
        total: BigNumber;
        isClaimed: boolean;
        time: BigNumber;
        issueIndex: BigNumber;
      }
    >;

    lotteryId(overrides?: CallOverrides): Promise<BigNumber>;

    lotteryInfo(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxNumber(overrides?: CallOverrides): Promise<number>;

    minPrice(overrides?: CallOverrides): Promise<BigNumber>;

    multiBuy(
      _price: BigNumberish,
      _numbers: [BigNumberish, BigNumberish, BigNumberish, BigNumberish][],
      overrides?: CallOverrides
    ): Promise<void>;

    multiClaim(
      _tickets: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    nextTimeDraw(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rolloverAllocation(overrides?: CallOverrides): Promise<number>;

    setAdmin(_adminAddress: string, overrides?: CallOverrides): Promise<void>;

    setAllocation(
      _allocation1: BigNumberish,
      _allocation2: BigNumberish,
      _allocation3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMainToken(_newToken: string, overrides?: CallOverrides): Promise<void>;

    setMaxNumber(
      _maxNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinPrice(_price: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setNextTimeDraw(
      _nextTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasuryAddress(
      _treasuryAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    totalAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    totalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasuryAddress(overrides?: CallOverrides): Promise<string>;

    userBuyAmountSum(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userHistory(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userInfo(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vipList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    winery(overrides?: CallOverrides): Promise<string>;

    winningNumbers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;
  };

  filters: {
    "Buy(address,uint256)"(
      user?: string | null,
      tokenId?: null
    ): BuyEventFilter;
    Buy(user?: string | null, tokenId?: null): BuyEventFilter;

    "Claim(address,uint256,uint256)"(
      user?: string | null,
      tokenid?: null,
      amount?: null
    ): ClaimEventFilter;
    Claim(
      user?: string | null,
      tokenid?: null,
      amount?: null
    ): ClaimEventFilter;

    "DevWithdraw(address,uint256)"(
      user?: string | null,
      amount?: null
    ): DevWithdrawEventFilter;
    DevWithdraw(user?: string | null, amount?: null): DevWithdrawEventFilter;

    "Drawing(uint256,uint8[4])"(
      issueIndex?: BigNumberish | null,
      winningNumbers?: null
    ): DrawingEventFilter;
    Drawing(
      issueIndex?: BigNumberish | null,
      winningNumbers?: null
    ): DrawingEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "MultiBuy(address,uint256)"(
      user?: string | null,
      amount?: null
    ): MultiBuyEventFilter;
    MultiBuy(user?: string | null, amount?: null): MultiBuyEventFilter;

    "MultiClaim(address,uint256)"(
      user?: string | null,
      amount?: null
    ): MultiClaimEventFilter;
    MultiClaim(user?: string | null, amount?: null): MultiClaimEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Reset(uint256,uint256,uint256)"(
      issueIndex?: BigNumberish | null,
      unclaimableRewards?: null,
      burnAmount?: null
    ): ResetEventFilter;
    Reset(
      issueIndex?: BigNumberish | null,
      unclaimableRewards?: null,
      burnAmount?: null
    ): ResetEventFilter;
  };

  estimateGas: {
    adminAddress(overrides?: CallOverrides): Promise<BigNumber>;

    adminNonce(overrides?: CallOverrides): Promise<BigNumber>;

    adminWithdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allocation(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approveTransfer(
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnAllocation(overrides?: CallOverrides): Promise<BigNumber>;

    buy(
      _price: BigNumberish,
      _numbers: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimReward(
      _lotteryId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    drawed(overrides?: CallOverrides): Promise<BigNumber>;

    drawing(
      _nextTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    drawingPhase(overrides?: CallOverrides): Promise<BigNumber>;

    encodeFreeClaimTicketHasedMessage(
      _sender: string,
      _freeClaimCounts: BigNumberish,
      _timeout: BigNumberish,
      _numbers: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    enterDrawingPhase(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    freeClaimCounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    freeClaimTicketPermit(
      _timeout: BigNumberish,
      _numbers: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    generateNumberIndexKey(
      number: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMatchingRewardAmount(
      _issueIndex: BigNumberish,
      _matchingNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumbersTicket(
      _lotteryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardView(
      _lotteryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalRewards(
      _issueIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserHistory(
      member: string,
      _issueIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    historyAmount(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    historyNumbers(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _winery: string,
      _minPrice: BigNumberish,
      _maxNumber: BigNumberish,
      _owner: string,
      _adminAddress: string,
      _treasuryAddress: string,
      _nextTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    issueIndex(overrides?: CallOverrides): Promise<BigNumber>;

    lastTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    lotteryBuyInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lotteryId(overrides?: CallOverrides): Promise<BigNumber>;

    lotteryInfo(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxNumber(overrides?: CallOverrides): Promise<BigNumber>;

    minPrice(overrides?: CallOverrides): Promise<BigNumber>;

    multiBuy(
      _price: BigNumberish,
      _numbers: [BigNumberish, BigNumberish, BigNumberish, BigNumberish][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    multiClaim(
      _tickets: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nextTimeDraw(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rolloverAllocation(overrides?: CallOverrides): Promise<BigNumber>;

    setAdmin(
      _adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAllocation(
      _allocation1: BigNumberish,
      _allocation2: BigNumberish,
      _allocation3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMainToken(
      _newToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxNumber(
      _maxNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinPrice(
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNextTimeDraw(
      _nextTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTreasuryAddress(
      _treasuryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    totalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasuryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    userBuyAmountSum(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userHistory(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userInfo(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vipList(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    winery(overrides?: CallOverrides): Promise<BigNumber>;

    winningNumbers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    adminAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adminNonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adminWithdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allocation(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approveTransfer(
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnAllocation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buy(
      _price: BigNumberish,
      _numbers: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimReward(
      _lotteryId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    drawed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    drawing(
      _nextTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    drawingPhase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    encodeFreeClaimTicketHasedMessage(
      _sender: string,
      _freeClaimCounts: BigNumberish,
      _timeout: BigNumberish,
      _numbers: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    enterDrawingPhase(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    freeClaimCounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    freeClaimTicketPermit(
      _timeout: BigNumberish,
      _numbers: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    generateNumberIndexKey(
      number: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMatchingRewardAmount(
      _issueIndex: BigNumberish,
      _matchingNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumbersTicket(
      _lotteryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardView(
      _lotteryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalRewards(
      _issueIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserHistory(
      member: string,
      _issueIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    historyAmount(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    historyNumbers(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _winery: string,
      _minPrice: BigNumberish,
      _maxNumber: BigNumberish,
      _owner: string,
      _adminAddress: string,
      _treasuryAddress: string,
      _nextTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    issueIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lotteryBuyInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lotteryId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lotteryInfo(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multiBuy(
      _price: BigNumberish,
      _numbers: [BigNumberish, BigNumberish, BigNumberish, BigNumberish][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    multiClaim(
      _tickets: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nextTimeDraw(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rolloverAllocation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAdmin(
      _adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAllocation(
      _allocation1: BigNumberish,
      _allocation2: BigNumberish,
      _allocation3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMainToken(
      _newToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxNumber(
      _maxNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinPrice(
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNextTimeDraw(
      _nextTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTreasuryAddress(
      _treasuryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalAddresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasuryAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userBuyAmountSum(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userHistory(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vipList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    winery(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    winningNumbers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
